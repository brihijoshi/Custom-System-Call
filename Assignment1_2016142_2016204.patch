diff -ruN linux-3.13/arch/x86/syscalls/syscall_64.tbl linux-3.13_changed/arch/x86/syscalls/syscall_64.tbl
--- linux-3.13/arch/x86/syscalls/syscall_64.tbl	2014-01-20 08:10:07.000000000 +0530
+++ linux-3.13_changed/arch/x86/syscalls/syscall_64.tbl	2018-02-11 19:48:08.714027791 +0530
@@ -320,6 +320,7 @@
 311	64	process_vm_writev	sys_process_vm_writev
 312	common	kcmp			sys_kcmp
 313	common	finit_module		sys_finit_module
+314	64	sh_task_info		sys_sh_task_info
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff -ruN linux-3.13/include/linux/syscalls.h linux-3.13_changed/include/linux/syscalls.h
--- linux-3.13/include/linux/syscalls.h	2014-01-20 08:10:07.000000000 +0530
+++ linux-3.13_changed/include/linux/syscalls.h	2018-02-11 19:48:08.714027791 +0530
@@ -847,4 +847,5 @@
 asmlinkage long sys_kcmp(pid_t pid1, pid_t pid2, int type,
 			 unsigned long idx1, unsigned long idx2);
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
+asmlinkage long sys_sh_task_info(int pid, char *fname);
 #endif
diff -ruN linux-3.13/Makefile linux-3.13_changed/Makefile
--- linux-3.13/Makefile	2014-01-20 08:10:07.000000000 +0530
+++ linux-3.13_changed/Makefile	2018-02-11 19:48:08.714027791 +0530
@@ -754,7 +754,7 @@
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ sh_task_info/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -ruN linux-3.13/security/tomoyo/builtin-policy.h linux-3.13_changed/security/tomoyo/builtin-policy.h
--- linux-3.13/security/tomoyo/builtin-policy.h	1970-01-01 05:30:00.000000000 +0530
+++ linux-3.13_changed/security/tomoyo/builtin-policy.h	2018-02-11 19:55:08.094027791 +0530
@@ -0,0 +1,12 @@
+static char tomoyo_builtin_profile[] __initdata =
+"";
+static char tomoyo_builtin_exception_policy[] __initdata =
+"initialize_domain /sbin/modprobe from any\n"
+"initialize_domain /sbin/hotplug from any\n"
+"";
+static char tomoyo_builtin_domain_policy[] __initdata =
+"";
+static char tomoyo_builtin_manager[] __initdata =
+"";
+static char tomoyo_builtin_stat[] __initdata =
+"";
diff -ruN linux-3.13/security/tomoyo/policy/exception_policy.conf linux-3.13_changed/security/tomoyo/policy/exception_policy.conf
--- linux-3.13/security/tomoyo/policy/exception_policy.conf	1970-01-01 05:30:00.000000000 +0530
+++ linux-3.13_changed/security/tomoyo/policy/exception_policy.conf	2018-02-11 19:48:08.714027791 +0530
@@ -0,0 +1,2 @@
+initialize_domain /sbin/modprobe from any
+initialize_domain /sbin/hotplug from any
diff -ruN linux-3.13/sh_task_info/Makefile linux-3.13_changed/sh_task_info/Makefile
--- linux-3.13/sh_task_info/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ linux-3.13_changed/sh_task_info/Makefile	2018-02-11 19:48:08.718027791 +0530
@@ -0,0 +1 @@
+obj-y := sh_task_info.o
diff -ruN linux-3.13/sh_task_info/sh_task_info.c linux-3.13_changed/sh_task_info/sh_task_info.c
--- linux-3.13/sh_task_info/sh_task_info.c	1970-01-01 05:30:00.000000000 +0530
+++ linux-3.13_changed/sh_task_info/sh_task_info.c	2018-02-15 22:26:21.099793000 +0530
@@ -0,0 +1,111 @@
+/*
+ * CSE231: Operating Systems
+ * Assignment 1 - A Simple System Call
+ * Brihi Joshi (2016142)
+ * Taejas Gupta (2016204)
+ * February 10, 2018
+ *
+ * Custom system call sh_task_info().
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/pid.h>
+#include <linux/pid_namespace.h>
+#include <linux/string.h>
+#include <linux/fcntl.h>
+#include <linux/syscalls.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/string.h>
+#include <asm/uaccess.h>
+#include <uapi/asm-generic/errno.h>
+
+struct pid *pid_struct;
+struct task_struct *task;
+struct sched_entity se;
+struct thread_struct thread;
+
+asmlinkage long sys_sh_task_info(int pid, char *fname)
+{
+	int fname_length = strlen(fname);
+	// Returns error code if length of file name exceeds 100.
+	if (fname_length > 100) {
+		return -ENAMETOOLONG;
+	}
+
+	pid_struct = find_get_pid(pid);
+	// Returns error code if PID is not valid.
+	if (pid_struct == NULL) {
+		return -EINVAL;
+	}
+	// Gets task_struct corresponding to PID.
+	task = pid_task(pid_struct, PIDTYPE_PID);
+
+	se = task->se;
+	thread = task->thread;
+
+	// Prints the fields corresponding to the task_struct to stdout and the kernel log message buffer.
+	printk(KERN_CRIT
+	       "state: %ld\non_cpu: %ld\nprio: %ld\nstatic_prio: %ld\nnormal_prio: %ld\nrt_priority: %lu\nse->on_rq: %lu\nse->exec_start: %lu\nse->sum_exec_runtime: %lu\nse->vruntime: %lu\nse->prev_sum_exec_runtime: %lu\nse->nr_migrations: %lu\npid: %ld\ntgid: %ld\nblocked: %lu\nreal_blocked: %lu\nthread->sp0: %lu\nthread->sp: %lu\nthread->usersp: %lu\nthread->es %lu\nthread->ds: %lu\n",
+	       (long)task->state, (long)task->on_cpu, (long)task->prio,
+	       (long)task->static_prio, (long)task->normal_prio,
+	       (unsigned long)task->rt_priority, (long unsigned)se.on_rq,
+	       (unsigned long)se.exec_start, (unsigned long)se.sum_exec_runtime,
+	       (unsigned long)se.vruntime,
+	       (unsigned long)se.prev_sum_exec_runtime,
+	       (unsigned long)se.nr_migrations, task->pid,
+	       task->tgid, task->blocked,
+	       task->real_blocked, (unsigned long)thread.sp0,
+	       (unsigned long)thread.sp, (unsigned long)thread.usersp,
+	       (unsigned long)thread.es, (unsigned long)thread.ds);
+
+	// Buffer to store formatted string.
+	char buf[2048];
+	int make_buf = sprintf(buf,
+			       "state: %ld\non_cpu: %ld\nprio: %ld\nstatic_prio: %ld\nnormal_prio: %ld\nrt_priority: %lu\nse->on_rq: %lu\nse->exec_start: %lu\nse->sum_exec_runtime: %lu\nse->vruntime: %lu\nse->prev_sum_exec_runtime: %lu\nse->nr_migrations: %lu\npid: %ld\ntgid: %ld\nblocked: %lu\nreal_blocked: %lu\nthread->sp0: %lu\nthread->sp: %lu\nthread->usersp: %lu\nthread->es %lu\nthread->ds: %lu\n",
+			       (long)task->state, (long)task->on_cpu,
+			       (long)task->prio,
+			       (long)task->static_prio, (long)task->normal_prio,
+			       (unsigned long)task->rt_priority,
+			       (unsigned long)se.on_rq,
+			       (unsigned long)se.exec_start,
+			       (unsigned long)se.sum_exec_runtime,
+			       (unsigned long)se.vruntime,
+			       (unsigned long)se.prev_sum_exec_runtime,
+			       (unsigned long)se.nr_migrations,
+			       task->pid, task->tgid,
+			       task->blocked,
+			       task->real_blocked,
+			       (unsigned long)thread.sp0,
+			       (unsigned long)thread.sp,
+			       (unsigned long)thread.usersp,
+			       (unsigned long)thread.es,
+			       (unsigned long)thread.ds);
+	// Creates a file type struct for the corresponding file name.
+	struct file *file;
+	// pos defines the position of the pointer in the file.
+	loff_t pos = 0;
+	//Declaring the file descriptor.
+	int fd;
+	// Get_fs() gets a free file segment - getting free memory.
+	mm_segment_t old_fs = get_fs();
+	// Setting the free segment.
+	set_fs(KERNEL_DS);
+	// Assigning file descriptor to fd.
+	fd = sys_open(fname, O_WRONLY | O_CREAT | O_TRUNC, 0644);
+	// Writes fields corresponding to the task_struct to file fname if the file has been opened successfully.
+	if (fd >= 0) {
+		sys_write(fd, buf, strlen(buf));
+		file = fget(fd);
+		if (file) {
+			// Writes to the file at the pos given.
+			vfs_write(file, buf, strlen(buf), &pos);
+			fput(file);
+		}
+		sys_close(fd);
+	}
+	// Sets the file segment with the written memory. 
+	set_fs(old_fs);
+	return 0;
+}
